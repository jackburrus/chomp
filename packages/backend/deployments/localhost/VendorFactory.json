{
  "address": "0x04C89607413713Ec9775E14b954286519d836FEf",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vendor_name",
          "type": "string"
        }
      ],
      "name": "VendorCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_vendorName",
          "type": "string"
        }
      ],
      "name": "createVendor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVendors",
      "outputs": [
        {
          "internalType": "contract Vendor[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "list_of_vendors",
      "outputs": [
        {
          "internalType": "contract Vendor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc61e70e9fa10a509d086ebdf555accf4ca6c8d3f4c1716015f3d106d28237c5d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x04C89607413713Ec9775E14b954286519d836FEf",
    "transactionIndex": 0,
    "gasUsed": "3534235",
    "logsBloom": "0x
    "blockHash": "0x69d6b138612306e1e61e1834a24914b93e995206cd196f9989fd030394c79a3d",
    "transactionHash": "0xc61e70e9fa10a509d086ebdf555accf4ca6c8d3f4c1716015f3d106d28237c5d",
    "logs": [],
    "blockNumber": 319,
    "cumulativeGasUsed": "3534235",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 25,
  "solcInputHash": "1f1edd1f7c024448b9604c07d9a8f244",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vendor_name\",\"type\":\"string\"}],\"name\":\"VendorCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_vendorName\",\"type\":\"string\"}],\"name\":\"createVendor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVendors\",\"outputs\":[{\"internalType\":\"contract Vendor[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"list_of_vendors\",\"outputs\":[{\"internalType\":\"contract Vendor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VendorFactory.sol\":\"VendorFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SVG.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\nimport './Utils.sol';\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG's with a simple, web-like API.\\nlibrary svg {\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('g', _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('path', _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('text', _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('line', _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('circle', _props, _children);\\n    }\\n\\n    function rect(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('rect', _props, _children);\\n    }\\n\\n    function filter(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('filter', _props, _children);\\n    }\\n\\n    function cdata(string memory _content)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('<![CDATA[', _content, ']]>');\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('radialGradient', _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('linearGradient', _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                'stop',\\n                string.concat(\\n                    prop('stop-color', stopColor),\\n                    ' ',\\n                    prop('offset', string.concat(utils.uint2str(offset), '%')),\\n                    ' ',\\n                    _props\\n                ),\\n                utils.NULL\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('animateTransform', _props, utils.NULL);\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                '<',\\n                _tag,\\n                ' ',\\n                _props,\\n                '>',\\n                _children,\\n                '</',\\n                _tag,\\n                '>'\\n            );\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, '=', '\\\"', _val, '\\\" ');\\n    }\\n}\\n\",\"keccak256\":\"0xede991be6c0c3322e53573dc5c5f4e04eee263634cd2c5614752262af1e1fa1f\",\"license\":\"MIT\"},\"contracts/Utils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = '';\\n\\n    // formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('--', _key, ':', _val, ';');\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('var(--', _key, ')');\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('url(#', _id, ')');\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat('0.', utils.uint2str(_a))\\n            : '1';\\n        return\\n            string.concat(\\n                'rgba(',\\n                utils.uint2str(_r),\\n                ',',\\n                utils.uint2str(_g),\\n                ',',\\n                utils.uint2str(_b),\\n                ',',\\n                formattedA,\\n                ')'\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x3d349e802ef5db83738d348c646c41fe2ff3da48899728768bec9a52592456b9\",\"license\":\"MIT\"},\"contracts/Vendor.sol\":{\"content\":\"\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./SVG.sol\\\";\\n\\n\\ncontract Vendor is ERC721URIStorage {\\n  string public vendor_name;\\n  address public owner;\\n  address public deployer;\\n  uint totalProducts;\\n\\n  //create a struct for products\\n  struct Product {\\n    string name;\\n    uint price;\\n    string image;\\n    uint quantity;\\n    uint id;\\n  }\\n\\n  mapping(uint => Product) public products;\\n\\n  event ProductAdded(\\n    string name,\\n    uint price,\\n    string image,\\n    uint quantity,\\n    uint id\\n  );\\n\\n  event ProductAddedToCart(\\n    string name,\\n    uint price,\\n    string image,\\n    uint quantity,\\n    uint id\\n  );\\n\\n\\n  event ProductPurchased(\\n    string name,\\n    uint price,\\n    string image,\\n    uint quantity,\\n    uint id\\n  );\\n\\n  event ReceiptMinted(\\n    uint id\\n  );\\n\\n  //create a shopping cart to add products to\\n  struct ShoppingCart {\\n    uint id;\\n    uint[] products;\\n  }\\n\\n  ShoppingCart public shoppingCart;\\n\\n  function addProductToCart(uint _id) public {\\n    shoppingCart.products.push(_id);\\n    emit ProductAddedToCart(products[_id].name, products[_id].price, products[_id].image, products[_id].quantity, products[_id].id);\\n  }\\n\\n function getCartProductFromListOfProducts(uint _id) public view returns (Product memory) {\\n   return products[_id];\\n }\\n\\n  function removeProductFromCart(uint _id) public {\\n    for (uint i = 0; i < shoppingCart.products.length; i++) {\\n      if (shoppingCart.products[i] == _id) {\\n        delete shoppingCart.products[i];\\n      }\\n    }\\n  }\\n\\n  function getProductsInCart() public view returns (uint[] memory) {\\n    return shoppingCart.products;\\n  }\\n\\n  function getTotalPrice() public view returns (uint) {\\n    uint totalPrice = 0;\\n    for (uint i = 0; i < shoppingCart.products.length; i++) {\\n      totalPrice += products[shoppingCart.products[i]].price;\\n    }\\n    return totalPrice;\\n  }\\n\\n  function sendEtherToVendor() public payable {\\n    payable(owner).transfer(msg.value);\\n    for (uint i = 0; i < shoppingCart.products.length; i++) {\\n      emit ProductPurchased(\\n        products[shoppingCart.products[i]].name,\\n        products[shoppingCart.products[i]].price,\\n        products[shoppingCart.products[i]].image,\\n        products[shoppingCart.products[i]].quantity,\\n        products[shoppingCart.products[i]].id\\n      );\\n    }\\n    delete shoppingCart.products;\\n  }\\n\\n  function addProduct(string memory _name, uint _price, string memory _image, uint _quantity) public {\\n    totalProducts++;\\n    products[totalProducts] = Product(_name, _price, _image, _quantity, totalProducts);\\n\\n    emit ProductAdded(_name, _price, _image, _quantity, totalProducts);\\n  }\\n\\n\\n\\n\\n  function getPrice(uint _id) public view returns (uint) {\\n    return products[_id].price;\\n  }\\n\\n  function getProducts() public view returns (Product[] memory) {\\n    Product[] memory list_of_products = new Product[](totalProducts);\\n    for (uint i = 0; i < totalProducts; i++) {\\n      list_of_products[i] = products[i + 1];\\n    }\\n    return list_of_products;\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return owner;\\n  }\\n\\n  function getVendorName() public view returns (string memory) {\\n    return vendor_name;\\n  }\\n\\n  constructor(address _owner,  string memory _vendorName) ERC721 (\\\"Vendor\\\", \\\"VENDOR\\\") {\\n    vendor_name = _vendorName;\\n    owner = _owner;\\n    deployer = msg.sender;\\n  }\\n\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _tokenIds;\\n\\n\\n\\n\\n\\n  function makeAnEpicNFT() public {\\n    uint256 newItemId = _tokenIds.current();\\n\\n    string memory finalSvg = string(abi.encodePacked( string.concat(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"300\\\" height=\\\"400\\\" style=\\\"background:#ffffff; border-radius:10px; border-style: solid; border-width:2px; border-color:black \\\">',\\n                svg.text(\\n                    string.concat(\\n                        svg.prop('x', '20'),\\n                        svg.prop('y', '40'),\\n                        svg.prop('font-size', '22'),\\n                        svg.prop('fill', 'black')\\n                    ),\\n                    string.concat(\\n                        svg.cdata('Receipt for order #'),\\n                        utils.uint2str(newItemId)\\n                    )\\n                ),\\n                svg.rect(\\n                    string.concat(\\n                        svg.prop('fill', 'black'),\\n                        svg.prop('x', '20'),\\n                        svg.prop('y', '50'),\\n                        svg.prop('width', utils.uint2str(190)),\\n                        svg.prop('height', utils.uint2str(3))\\n                    ),\\n                    utils.NULL\\n                ),\\n\\n                // renderItems(),\\n\\n                svg.rect(\\n                    string.concat(\\n                        svg.prop('fill', 'black'),\\n                        svg.prop('x', '20'),\\n                        svg.prop('y', '260'),\\n                        svg.prop('width', utils.uint2str(190)),\\n                        svg.prop('height', utils.uint2str(2))\\n                    ),\\n                    utils.NULL\\n                ),\\n                svg.text(\\n                    string.concat(\\n                        svg.prop('x', '20'),\\n                        svg.prop('y', '280'),\\n                        svg.prop('font-size', '16'),\\n                        svg.prop('fill', 'black')\\n                    ),\\n                    'Total'\\n                ),\\n                svg.text(\\n                    string.concat(\\n                        svg.prop('x', '20'),\\n                        svg.prop('y', '300'),\\n                        svg.prop('font-size', '16'),\\n                        svg.prop('fill', 'black')\\n                    ),\\n                    '0.000000000000000001 USD'\\n                ),\\n                '</svg>')));\\n    console.log(\\\"\\\\n--------------------\\\");\\n    console.log(finalSvg);\\n    console.log(\\\"--------------------\\\\n\\\");\\n    // Actually mint the NFT to the sender using msg.sender.\\n    _safeMint(msg.sender, newItemId);\\n    // Set the NFTs data.\\n    _setTokenURI(newItemId, finalSvg);\\n    console.log(\\\"An NFT w/ ID %s has been minted to %s\\\", newItemId, msg.sender);\\n    // Increment the counter for when the next NFT is minted.\\n    _tokenIds.increment();\\n    emit ReceiptMinted(newItemId);\\n  }\\n\\n  function getTokenUri (uint256 _tokenId) public view returns (string memory) {\\n    return tokenURI(_tokenId);\\n  }\\n\\n}\",\"keccak256\":\"0x14ba3b2ef063b24605612bc08f22248fdbc3577d13296653dcd38a101ea987a9\"},\"contracts/VendorFactory.sol\":{\"content\":\"\\nimport \\\"./Vendor.sol\\\";\\n\\ncontract VendorFactory {\\n  // instantiate Bank contract\\n  Vendor vendor;\\n  //keep track of created Bank addresses in array\\n  Vendor[] public list_of_vendors;\\n\\n  //VendorCreated event\\n  event VendorCreated(address vendor_address, address owner, string vendor_name);\\n\\n  // function arguments are passed to the constructor of the new created contract\\n  function createVendor(address _owner, string memory _vendorName) external {\\n    vendor = new Vendor(_owner, _vendorName);\\n    list_of_vendors.push(vendor);\\n    //emit an event with the address of the new contract\\n    emit VendorCreated(address(vendor), _owner, _vendorName);\\n  }\\n\\n  //create a function that returns all the vendors\\n  function getVendors() external view returns (Vendor[] memory) {\\n    return list_of_vendors;\\n  }\\n}\",\"keccak256\":\"0x3b65bff8a3d875535ae1aae664e1f3eb4f53f7beffabbcb58eaf6a64f4846efd\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613f02806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806364bebcc5146200004b57806391452ef4146200006d578063eac310ac1462000093575b600080fd5b62000055620000ac565b604051620000649190620002be565b60405180910390f35b620000846200007e366004620002f6565b62000110565b60405162000064919062000323565b620000aa620000a43660046200046d565b6200013b565b005b606060018054806020026020016040519081016040528092919081815260200182805480156200010657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620000e7575b5050505050905090565b600181815481106200012157600080fd5b6000918252602090912001546001600160a01b0316905081565b81816040516200014b906200020e565b6200015892919062000540565b604051809103906000f08015801562000175573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556001805480820182559084527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909216179055546040517f72ed0dee50bf115b04570644917f9048aa993a4fb79cb71fb9801f770d7f288a92620002029216908590859062000564565b60405180910390a15050565b61392c80620005a183390190565b60006001600160a01b0382165b92915050565b600062000229826200021c565b600062000229826200022f565b62000254816200023c565b82525050565b600062000268838362000249565b505060200190565b60006200027b825190565b80845260209384019383018060005b83811015620002b3578151620002a188826200025a565b9750602083019250506001016200028a565b509495945050505050565b60208082528101620002d1818462000270565b9392505050565b805b8114620002e657600080fd5b50565b80356200022981620002d8565b6000602082840312156200030d576200030d600080fd5b60006200031b8484620002e9565b949350505050565b6020810162000229828462000249565b60006001600160a01b03821662000229565b620002da8162000333565b8035620002298162000345565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156200039c576200039c6200035d565b6040525050565b6000620003af60405190565b9050620003bd828262000373565b919050565b600067ffffffffffffffff821115620003df57620003df6200035d565b601f19601f83011660200192915050565b82818337506000910152565b6000620004136200040d84620003c2565b620003a3565b905082815260208101848484011115620004305762000430600080fd5b6200043d848285620003f0565b509392505050565b600082601f8301126200045b576200045b600080fd5b81356200031b848260208601620003fc565b60008060408385031215620004855762000485600080fd5b600062000493858562000350565b925050602083013567ffffffffffffffff811115620004b557620004b5600080fd5b620004c38582860162000445565b9150509250929050565b620002548162000333565b60005b83811015620004f5578181015183820152602001620004db565b8381111562000505576000848401525b50505050565b600062000516825190565b8084526020840193506200052f818560208601620004d8565b601f01601f19169290920192915050565b60408101620005508285620004cd565b81810360208301526200031b81846200050b565b60608101620005748286620004cd565b620005836020830185620004cd565b81810360408301526200059781846200050b565b9594505050505056fe60806040523480156200001157600080fd5b506040516200392c3803806200392c833981016040819052620000349162000306565b604051806040016040528060068152602001652b32b73237b960d11b815250604051806040016040528060068152602001652b22a72227a960d11b81525081600090805190602001906200008a929190620000e9565b508051620000a0906001906020840190620000e9565b50508151620000b891506007906020840190620000e9565b5050600880546001600160a01b039092166001600160a01b03199283161790556009805490911633179055620003ac565b828054620000f7906200037b565b90600052602060002090601f0160209004810192826200011b576000855562000166565b82601f106200013657805160ff191683800117855562000166565b8280016001018555821562000166579182015b828111156200016657825182559160200191906001019062000149565b506200017492915062000178565b5090565b5b8082111562000174576000815560010162000179565b60006001600160a01b0382165b92915050565b620001ad816200018f565b8114620001b957600080fd5b50565b80516200019c81620001a2565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620002075762000207620001c9565b6040525050565b60006200021a60405190565b9050620002288282620001df565b919050565b60006001600160401b03821115620002495762000249620001c9565b601f19601f83011660200192915050565b60005b83811015620002775781810151838201526020016200025d565b8381111562000287576000848401525b50505050565b6000620002a46200029e846200022d565b6200020e565b905082815260208101848484011115620002c157620002c1600080fd5b620002ce8482856200025a565b509392505050565b600082601f830112620002ec57620002ec600080fd5b8151620002fe8482602086016200028d565b949350505050565b600080604083850312156200031e576200031e600080fd5b60006200032c8585620001bc565b92505060208301516001600160401b038111156200034d576200034d600080fd5b6200035b85828601620002d6565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200039057607f821691505b60208210811415620003a657620003a662000365565b50919050565b61357080620003bc6000396000f3fe6080604052600436106101d85760003560e01c806386ae747011610102578063c87b56dd11610095578063de9d132f11610064578063de9d132f1461054f578063e757223014610564578063e985e9c514610594578063f475409f146105b457600080fd5b8063c87b56dd146104da578063d5f39488146104fa578063d870b7971461051a578063de8b538d1461054757600080fd5b806395d89b41116100d157806395d89b4114610463578063a22cb46514610478578063b88d4fde14610498578063c29b2f20146104b857600080fd5b806386ae7470146103f0578063893d20e8146104055780638ad91345146104235780638da5cb5b1461044357600080fd5b80633a2a925c1161017a5780636352211e116101495780636352211e1461035f5780636ebdac121461037f57806370a082311461039f5780637acc0b20146103bf57600080fd5b80633a2a925c146102d957806342842e0e146102f9578063459b01c9146103195780634b673d111461033b57600080fd5b8063095ea7b3116101b6578063095ea7b31461026257806323b872dd146102845780632bf32ec3146102a457806330523e7e146102c457600080fd5b806301ffc9a7146101dd57806306fdde0314610213578063081812fc14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f83660046125ed565b6105c9565b60405161020a9190612618565b60405180910390f35b34801561021f57600080fd5b5061022861061b565b60405161020a9190612684565b34801561024157600080fd5b506102556102503660046126a6565b6106ad565b60405161020a91906126e1565b34801561026e57600080fd5b5061028261027d366004612703565b6106d4565b005b34801561029057600080fd5b5061028261029f366004612740565b610763565b3480156102b057600080fd5b506102826102bf3660046126a6565b610794565b3480156102d057600080fd5b50610228610826565b3480156102e557600080fd5b506102826102f436600461288b565b610835565b34801561030557600080fd5b50610282610314366004612740565b610919565b34801561032557600080fd5b5061032e610934565b60405161020a9190612987565b34801561034757600080fd5b50600c546103529081565b60405161020a9190612998565b34801561036b57600080fd5b5061025561037a3660046126a6565b61098e565b34801561038b57600080fd5b5061028261039a3660046126a6565b6109c3565b3480156103ab57600080fd5b506103526103ba3660046129a6565b610a2e565b3480156103cb57600080fd5b506103df6103da3660046126a6565b610a72565b60405161020a9594939291906129c7565b3480156103fc57600080fd5b50610228610bb0565b34801561041157600080fd5b506008546001600160a01b0316610255565b34801561042f57600080fd5b5061022861043e3660046126a6565b610c3e565b34801561044f57600080fd5b50600854610255906001600160a01b031681565b34801561046f57600080fd5b50610228610c49565b34801561048457600080fd5b50610282610493366004612a32565b610c58565b3480156104a457600080fd5b506102826104b3366004612a65565b610c63565b3480156104c457600080fd5b506104cd610c9b565b60405161020a9190612bb7565b3480156104e657600080fd5b506102286104f53660046126a6565b610ecd565b34801561050657600080fd5b50600954610255906001600160a01b031681565b34801561052657600080fd5b5061053a6105353660046126a6565b610fde565b60405161020a9190612bc8565b610282611171565b34801561055b57600080fd5b50610282611324565b34801561057057600080fd5b5061035261057f3660046126a6565b6000908152600b602052604090206001015490565b3480156105a057600080fd5b506101fd6105af366004612bd9565b611aec565b3480156105c057600080fd5b50610352611b1a565b60006001600160e01b031982166380ac58cd60e01b14806105fa57506001600160e01b03198216635b5e139f60e01b145b8061061557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461062a90612c22565b80601f016020809104026020016040519081016040528092919081815260200182805461065690612c22565b80156106a35780601f10610678576101008083540402835291602001916106a3565b820191906000526020600020905b81548152906001019060200180831161068657829003601f168201915b5050505050905090565b60006106b882611b7f565b506000908152600460205260409020546001600160a01b031690565b60006106df8261098e565b9050806001600160a01b0316836001600160a01b0316141561071c5760405162461bcd60e51b815260040161071390612c8a565b60405180910390fd5b336001600160a01b038216148061073857506107388133611aec565b6107545760405162461bcd60e51b815260040161071390612cf4565b61075e8383611bb6565b505050565b61076d3382611c24565b6107895760405162461bcd60e51b815260040161071390612d4f565b61075e838383611c82565b600d805460018181019092557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5018290556000828152600b602052604090819020918201546003830154600484015492517ff2984bdc0ce5f88de2f42cd8fc34fe3eddf8d42434e2ba1f537df310f4e2274b9461081b949093926002850192909190612dd5565b60405180910390a150565b60606007805461062a90612c22565b600a805490600061084583612e1d565b90915550506040805160a081018252858152602080820186905281830185905260608201849052600a54608083018190526000908152600b82529290922081518051929391926108989284920190612518565b506020828101516001830155604083015180516108bb9260028501920190612518565b5060608201516003820155608090910151600490910155600a546040517fe3b25aa175d4abb6345ae28b959875b745e963873f0d50229dfa7100efd3b0479161090b9187918791879187916129c7565b60405180910390a150505050565b61075e83838360405180602001604052806000815250610c63565b6060600c6001018054806020026020016040519081016040528092919081815260200182805480156106a357602002820191906000526020600020905b815481526020019060010190808311610971575050505050905090565b6000818152600260205260408120546001600160a01b0316806106155760405162461bcd60e51b815260040161071390612e6f565b60005b600d54811015610a2a5781600c60010182815481106109e7576109e7612e7f565b90600052602060002001541415610a1857600d805482908110610a0c57610a0c612e7f565b60009182526020822001555b80610a2281612e1d565b9150506109c6565b5050565b60006001600160a01b038216610a565760405162461bcd60e51b815260040161071390612edb565b506001600160a01b031660009081526003602052604090205490565b600b60205260009081526040902080548190610a8d90612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab990612c22565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b505050505090806001015490806002018054610b2190612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4d90612c22565b8015610b9a5780601f10610b6f57610100808354040283529160200191610b9a565b820191906000526020600020905b815481529060010190602001808311610b7d57829003601f168201915b5050505050908060030154908060040154905085565b60078054610bbd90612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610be990612c22565b8015610c365780601f10610c0b57610100808354040283529160200191610c36565b820191906000526020600020905b815481529060010190602001808311610c1957829003601f168201915b505050505081565b606061061582610ecd565b60606001805461062a90612c22565b610a2a338383611da4565b610c6d3383611c24565b610c895760405162461bcd60e51b815260040161071390612d4f565b610c9584848484611e47565b50505050565b60606000600a5467ffffffffffffffff811115610cba57610cba612790565b604051908082528060200260200182016040528015610d1d57816020015b610d0a6040518060a0016040528060608152602001600081526020016060815260200160008152602001600081525090565b815260200190600190039081610cd85790505b50905060005b600a54811015610ec757600b6000610d3c836001612eeb565b81526020019081526020016000206040518060a0016040529081600082018054610d6590612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9190612c22565b8015610dde5780601f10610db357610100808354040283529160200191610dde565b820191906000526020600020905b815481529060010190602001808311610dc157829003601f168201915b5050505050815260200160018201548152602001600282018054610e0190612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2d90612c22565b8015610e7a5780601f10610e4f57610100808354040283529160200191610e7a565b820191906000526020600020905b815481529060010190602001808311610e5d57829003601f168201915b5050505050815260200160038201548152602001600482015481525050828281518110610ea957610ea9612e7f565b60200260200101819052508080610ebf90612e1d565b915050610d23565b50919050565b6060610ed882611b7f565b60008281526006602052604081208054610ef190612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1d90612c22565b8015610f6a5780601f10610f3f57610100808354040283529160200191610f6a565b820191906000526020600020905b815481529060010190602001808311610f4d57829003601f168201915b505050505090506000610f8860408051602081019091526000815290565b9050805160001415610f9b575092915050565b815115610fcd578082604051602001610fb5929190612f25565b60405160208183030381529060405292505050919050565b610fd684611e7a565b949350505050565b6110106040518060a0016040528060608152602001600081526020016060815260200160008152602001600081525090565b6000828152600b602052604090819020815160a0810190925280548290829061103890612c22565b80601f016020809104026020016040519081016040528092919081815260200182805461106490612c22565b80156110b15780601f10611086576101008083540402835291602001916110b1565b820191906000526020600020905b81548152906001019060200180831161109457829003601f168201915b50505050508152602001600182015481526020016002820180546110d490612c22565b80601f016020809104026020016040519081016040528092919081815260200182805461110090612c22565b801561114d5780601f106111225761010080835404028352916020019161114d565b820191906000526020600020905b81548152906001019060200180831161113057829003601f168201915b50505050508152602001600382015481526020016004820154815250509050919050565b6008546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156111aa573d6000803e3d6000fd5b5060005b600d54811015611315577ffaabebfc042be040ffe38cdbde83eb863656dec8e75ee5bcf5dc88b7fe741588600b6000600c60010184815481106111f3576111f3612e7f565b90600052602060002001548152602001908152602001600020600001600b6000600c600101858154811061122957611229612e7f565b9060005260206000200154815260200190815260200160002060010154600b6000600c600101868154811061126057611260612e7f565b90600052602060002001548152602001908152602001600020600201600b6000600c600101878154811061129657611296612e7f565b9060005260206000200154815260200190815260200160002060030154600b6000600c60010188815481106112cd576112cd612e7f565b90600052602060002001548152602001908152602001600020600401546040516112fb959493929190612dd5565b60405180910390a18061130d81612e1d565b9150506111ae565b50611322600d600061259c565b565b600061132f600e5490565b905060006114b6611373604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b6113b0604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161034360f41b815250611eee565b6113f560405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161191960f11b815250611eee565b61143860405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b60405160200161144b9493929190612f3d565b60408051601f1981840301815282820190915260138252725265636569707420666f72206f72646572202360681b60208301529061148890611f1a565b61149185611f43565b6040516020016114a2929190612f25565b60405160208183030381529060405261206c565b6116046114fc60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b611539604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b611576604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161035360f41b815250611eee565b6115a6604051806040016040528060058152602001640eed2c8e8d60db1b8152506115a160be611f43565b611eee565b6115d2604051806040016040528060068152602001651a195a59da1d60d21b8152506115a16003611f43565b6040516020016115e6959493929190612f6d565b60408051601f19818403018152602083019091526000825290612095565b61171c61164a60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b611687604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b6116c5604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016203236360ec1b815250611eee565b6116f0604051806040016040528060058152602001640eed2c8e8d60db1b8152506115a160be611f43565b6115d2604051806040016040528060068152602001651a195a59da1d60d21b8152506115a16002611f43565b61186061175c604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b61179a604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016203238360ec1b815250611eee565b6117df60405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161189b60f11b815250611eee565b61182260405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b6040516020016118359493929190612f3d565b60408051601f198184030181528282019091526005825264151bdd185b60da1b60208301529061206c565b6119bc6118a0604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b6118de604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016203330360ec1b815250611eee565b61192360405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161189b60f11b815250611eee565b61196660405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b6040516020016119799493929190612f3d565b60408051601f19818403018152828201909152601882527f302e30303030303030303030303030303030303120555344000000000000000060208301529061206c565b6040516020016119d0959493929190612fb4565b60408051601f19818403018152908290526119ed916020016130dd565b60408051601f1981840301815282820190915260158252740a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d60581b60208301529150611a2d906120be565b611a36816120be565b611a6c6040518060400160405280601581526020017416969696969696969696969696969696969696968560591b8152506120be565b611a763383612101565b611a80828261211b565b611aa360405180606001604052806025815260200161351660259139833361216e565b611ab1600e80546001019055565b7fcfa92d0787bcd341bae7bf65f23e1711138fdb2fa7f4cbc3c4030475caf227a682604051611ae09190612998565b60405180910390a15050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600080805b600d54811015610ec757600b6000600c6001018381548110611b4357611b43612e7f565b906000526020600020015481526020019081526020016000206001015482611b6b9190612eeb565b915080611b7781612e1d565b915050611b1f565b6000818152600260205260409020546001600160a01b0316611bb35760405162461bcd60e51b815260040161071390612e6f565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611beb8261098e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c308361098e565b9050806001600160a01b0316846001600160a01b03161480611c575750611c578185611aec565b80610fd65750836001600160a01b0316611c70846106ad565b6001600160a01b031614949350505050565b826001600160a01b0316611c958261098e565b6001600160a01b031614611cbb5760405162461bcd60e51b81526004016107139061312b565b6001600160a01b038216611ce15760405162461bcd60e51b81526004016107139061317c565b611cec600082611bb6565b6001600160a01b0383166000908152600360205260408120805460019290611d1590849061318c565b90915550506001600160a01b0382166000908152600360205260408120805460019290611d43908490612eeb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b03161415611dd65760405162461bcd60e51b8152600401610713906131d7565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611e3a908590612618565b60405180910390a3505050565b611e52848484611c82565b611e5e848484846121b5565b610c955760405162461bcd60e51b815260040161071390613236565b6060611e8582611b7f565b6000611e9c60408051602081019091526000815290565b90506000815111611ebc5760405180602001604052806000815250611ee7565b80611ec6846122b3565b604051602001611ed7929190612f25565b6040516020818303038152906040525b9392505050565b60608282604051602001611f03929190613246565b604051602081830303815290604052905092915050565b606081604051602001611f2d9190613285565b6040516020818303038152906040529050919050565b606081611f675750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611f915780611f7b81612e1d565b9150611f8a9050600a836132cc565b9150611f6b565b60008167ffffffffffffffff811115611fac57611fac612790565b6040519080825280601f01601f191660200182016040528015611fd6576020820181803683370190505b509050815b851561206357611fec60018261318c565b90506000611ffb600a886132cc565b61200690600a6132e0565b612010908861318c565b61201b9060306132ff565b905060008160f81b90508084848151811061203857612038612e7f565b60200101906001600160f81b031916908160001a90535061205a600a896132cc565b97505050611fdb565b50949350505050565b6060611ee7604051806040016040528060048152602001631d195e1d60e21b81525084846123b1565b6060611ee7604051806040016040528060048152602001631c9958dd60e21b81525084846123b1565b611bb3816040516024016120d29190612684565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526123e2565b610a2a828260405180602001604052806000815250612403565b6000828152600260205260409020546001600160a01b031661214f5760405162461bcd60e51b81526004016107139061336b565b6000828152600660209081526040909120825161075e92840190612518565b61075e8383836040516024016121869392919061337b565b60408051601f198184030181529190526020810180516001600160e01b031663038fd88960e31b1790526123e2565b60006001600160a01b0384163b156122a857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121f99033908990889088906004016133a8565b6020604051808303816000875af1925050508015612234575060408051601f3d908101601f19168201909252612231918101906133ed565b60015b61228e573d808015612262576040519150601f19603f3d011682016040523d82523d6000602084013e612267565b606091505b5080516122865760405162461bcd60e51b815260040161071390613236565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610fd6565b506001949350505050565b6060816122d75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561230157806122eb81612e1d565b91506122fa9050600a836132cc565b91506122db565b60008167ffffffffffffffff81111561231c5761231c612790565b6040519080825280601f01601f191660200182016040528015612346576020820181803683370190505b5090505b8415610fd65761235b60018361318c565b9150612368600a8661340e565b612373906030612eeb565b60f81b81838151811061238857612388612e7f565b60200101906001600160f81b031916908160001a9053506123aa600a866132cc565b945061234a565b6060838383866040516020016123ca9493929190613422565b60405160208183030381529060405290509392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b61240d8383612436565b61241a60008484846121b5565b61075e5760405162461bcd60e51b815260040161071390613236565b6001600160a01b03821661245c5760405162461bcd60e51b8152600401610713906134c1565b6000818152600260205260409020546001600160a01b0316156124915760405162461bcd60e51b815260040161071390613505565b6001600160a01b03821660009081526003602052604081208054600192906124ba908490612eeb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461252490612c22565b90600052602060002090601f016020900481019282612546576000855561258c565b82601f1061255f57805160ff191683800117855561258c565b8280016001018555821561258c579182015b8281111561258c578251825591602001919060010190612571565b506125989291506125b6565b5090565b5080546000825590600052602060002090810190611bb391905b5b8082111561259857600081556001016125b7565b6001600160e01b031981165b8114611bb357600080fd5b8035610615816125cb565b60006020828403121561260257612602600080fd5b6000610fd684846125e2565b8015155b82525050565b60208101610615828461260e565b60005b83811015612641578181015183820152602001612629565b83811115610c955750506000910152565b600061265c825190565b808452602084019350612673818560208601612626565b601f01601f19169290920192915050565b60208082528101611ee78184612652565b806125d7565b803561061581612695565b6000602082840312156126bb576126bb600080fd5b6000610fd6848461269b565b60006001600160a01b038216610615565b612612816126c7565b6020810161061582846126d8565b6125d7816126c7565b8035610615816126ef565b6000806040838503121561271957612719600080fd5b600061272585856126f8565b92505060206127368582860161269b565b9150509250929050565b60008060006060848603121561275857612758600080fd5b600061276486866126f8565b9350506020612775868287016126f8565b92505060406127868682870161269b565b9150509250925092565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127cc576127cc612790565b6040525050565b60006127de60405190565b90506127ea82826127a6565b919050565b600067ffffffffffffffff82111561280957612809612790565b601f19601f83011660200192915050565b82818337506000910152565b6000612839612834846127ef565b6127d3565b90508281526020810184848401111561285457612854600080fd5b61285f84828561281a565b509392505050565b600082601f83011261287b5761287b600080fd5b8135610fd6848260208601612826565b600080600080608085870312156128a4576128a4600080fd5b843567ffffffffffffffff8111156128be576128be600080fd5b6128ca87828801612867565b94505060206128db8782880161269b565b935050604085013567ffffffffffffffff8111156128fb576128fb600080fd5b61290787828801612867565b92505060606129188782880161269b565b91505092959194509250565b80612612565b60006129368383612924565b505060200190565b6000612948825190565b80845260209384019383018060005b8381101561297c57815161296b888261292a565b975060208301925050600101612957565b509495945050505050565b60208082528101611ee7818461293e565b602081016106158284612924565b6000602082840312156129bb576129bb600080fd5b6000610fd684846126f8565b60a080825281016129d88188612652565b90506129e76020830187612924565b81810360408301526129f98186612652565b9050612a086060830185612924565b612a156080830184612924565b9695505050505050565b8015156125d7565b803561061581612a1f565b60008060408385031215612a4857612a48600080fd5b6000612a5485856126f8565b925050602061273685828601612a27565b60008060008060808587031215612a7e57612a7e600080fd5b6000612a8a87876126f8565b9450506020612a9b878288016126f8565b9350506040612aac8782880161269b565b925050606085013567ffffffffffffffff811115612acc57612acc600080fd5b61291887828801612867565b805160a080845260009190840190612af08282612652565b9150506020830151612b056020860182612924565b5060408301518482036040860152612b1d8282612652565b9150506060830151612b326060860182612924565b50608083015161285f6080860182612924565b6000611ee78383612ad8565b6000612b5b825190565b80845260208401935083602082028501612b758560200190565b8060005b85811015612baa5784840389528151612b928582612b45565b94506020830160209a909a0199925050600101612b79565b5091979650505050505050565b60208082528101611ee78184612b51565b60208082528101611ee78184612ad8565b60008060408385031215612bef57612bef600080fd5b6000612bfb85856126f8565b9250506020612736858286016126f8565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612c3657607f821691505b60208210811415610ec757610ec7612c0c565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602082015291505b5060400190565b6020808252810161061581612c49565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150612c83565b6020808252810161061581612c9a565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150612c83565b6020808252810161061581612d04565b60008154612d6c81612c22565b808552602085019450600182168015612d8c5760018114612d9e57612dcc565b60ff1983168652602086019350612dcc565b60008581526020902060005b83811015612dc657815488820152600190910190602001612daa565b87019450505b50505092915050565b60a08082528101612de68188612d5f565b9050612df56020830187612924565b81810360408301526129f98186612d5f565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612e3157612e31612e07565b5060010190565b601881526000602082017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815291505b5060200190565b6020808252810161061581612e38565b634e487b7160e01b600052603260045260246000fd5b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150612c83565b6020808252810161061581612e95565b60008219821115612efe57612efe612e07565b500190565b6000612f0d825190565b612f1b818560208601612626565b9290920192915050565b6000612f318285612f03565b9150610fd68284612f03565b6000612f498287612f03565b9150612f558286612f03565b9150612f618285612f03565b9150612a158284612f03565b6000612f798288612f03565b9150612f858287612f03565b9150612f918286612f03565b9150612f9d8285612f03565b9150612fa98284612f03565b979650505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222077696474683d2233303022206865696768743d223430302260208201527f207374796c653d226261636b67726f756e643a236666666666663b20626f726460408201527f65722d7261646975733a313070783b20626f726465722d7374796c653a20736f60608201527f6c69643b20626f726465722d77696474683a3270783b20626f726465722d636f60808201526b3637b91d313630b1b590111f60a11b60a082015260ac0160006130938288612f03565b915061309f8287612f03565b91506130ab8286612f03565b91506130b78285612f03565b91506130c38284612f03565b651e17b9bb339f60d11b8152600601979650505050505050565b6000611ee78284612f03565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150612c83565b60208082528101610615816130e9565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150612c83565b602080825281016106158161313b565b60008282101561319e5761319e612e07565b500390565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150612e68565b60208082528101610615816131a3565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150612c83565b60208082528101610615816131e7565b60006132528285612f03565b603d60f81b8152601160f91b600182015260020191506132728284612f03565b61011160f51b8152600201949350505050565b683c215b43444154415b60b81b815260090160006132a38284612f03565b622eae9f60e91b81526003019392505050565b634e487b7160e01b600052601260045260246000fd5b6000826132db576132db6132b6565b500490565b60008160001904831182151516156132fa576132fa612e07565b500290565b600060ff8216915060ff831692508260ff03821115612efe57612efe612e07565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b60208201529150612c83565b6020808252810161061581613320565b6060808252810161338c8186612652565b905061339b6020830185612924565b610fd660408301846126d8565b608081016133b682876126d8565b6133c360208301866126d8565b6133d06040830185612924565b8181036060830152612a158184612652565b8051610615816125cb565b60006020828403121561340257613402600080fd5b6000610fd684846133e2565b60008261341d5761341d6132b6565b500690565b600f60fa1b815260010160006134388287612f03565b600160fd1b8152600101915061344e8286612f03565b601f60f91b815260010191506134648285612f03565b613c2f60f01b8152600201915061347b8284612f03565b601f60f91b81526001019695505050505050565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000612e68565b602080825281016106158161348f565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150612e68565b60208082528101610615816134d156fe416e204e465420772f20494420257320686173206265656e206d696e74656420746f202573a2646970667358221220ccbf8f1db6d4a2299ca4775e01596cec47d515b344fa056a6f6b95223b34a31d64736f6c634300080c0033a264697066735822122006f22b2819f924a5cd239bdccd0fb62a667d7864f7b8a1ccccf91fe6f594a96f64736f6c634300080c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c806364bebcc5146200004b57806391452ef4146200006d578063eac310ac1462000093575b600080fd5b62000055620000ac565b604051620000649190620002be565b60405180910390f35b620000846200007e366004620002f6565b62000110565b60405162000064919062000323565b620000aa620000a43660046200046d565b6200013b565b005b606060018054806020026020016040519081016040528092919081815260200182805480156200010657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620000e7575b5050505050905090565b600181815481106200012157600080fd5b6000918252602090912001546001600160a01b0316905081565b81816040516200014b906200020e565b6200015892919062000540565b604051809103906000f08015801562000175573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b0319918216811783556001805480820182559084527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054909216179055546040517f72ed0dee50bf115b04570644917f9048aa993a4fb79cb71fb9801f770d7f288a92620002029216908590859062000564565b60405180910390a15050565b61392c80620005a183390190565b60006001600160a01b0382165b92915050565b600062000229826200021c565b600062000229826200022f565b62000254816200023c565b82525050565b600062000268838362000249565b505060200190565b60006200027b825190565b80845260209384019383018060005b83811015620002b3578151620002a188826200025a565b9750602083019250506001016200028a565b509495945050505050565b60208082528101620002d1818462000270565b9392505050565b805b8114620002e657600080fd5b50565b80356200022981620002d8565b6000602082840312156200030d576200030d600080fd5b60006200031b8484620002e9565b949350505050565b6020810162000229828462000249565b60006001600160a01b03821662000229565b620002da8162000333565b8035620002298162000345565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156200039c576200039c6200035d565b6040525050565b6000620003af60405190565b9050620003bd828262000373565b919050565b600067ffffffffffffffff821115620003df57620003df6200035d565b601f19601f83011660200192915050565b82818337506000910152565b6000620004136200040d84620003c2565b620003a3565b905082815260208101848484011115620004305762000430600080fd5b6200043d848285620003f0565b509392505050565b600082601f8301126200045b576200045b600080fd5b81356200031b848260208601620003fc565b60008060408385031215620004855762000485600080fd5b600062000493858562000350565b925050602083013567ffffffffffffffff811115620004b557620004b5600080fd5b620004c38582860162000445565b9150509250929050565b620002548162000333565b60005b83811015620004f5578181015183820152602001620004db565b8381111562000505576000848401525b50505050565b600062000516825190565b8084526020840193506200052f818560208601620004d8565b601f01601f19169290920192915050565b60408101620005508285620004cd565b81810360208301526200031b81846200050b565b60608101620005748286620004cd565b620005836020830185620004cd565b81810360408301526200059781846200050b565b9594505050505056fe60806040523480156200001157600080fd5b506040516200392c3803806200392c833981016040819052620000349162000306565b604051806040016040528060068152602001652b32b73237b960d11b815250604051806040016040528060068152602001652b22a72227a960d11b81525081600090805190602001906200008a929190620000e9565b508051620000a0906001906020840190620000e9565b50508151620000b891506007906020840190620000e9565b5050600880546001600160a01b039092166001600160a01b03199283161790556009805490911633179055620003ac565b828054620000f7906200037b565b90600052602060002090601f0160209004810192826200011b576000855562000166565b82601f106200013657805160ff191683800117855562000166565b8280016001018555821562000166579182015b828111156200016657825182559160200191906001019062000149565b506200017492915062000178565b5090565b5b8082111562000174576000815560010162000179565b60006001600160a01b0382165b92915050565b620001ad816200018f565b8114620001b957600080fd5b50565b80516200019c81620001a2565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715620002075762000207620001c9565b6040525050565b60006200021a60405190565b9050620002288282620001df565b919050565b60006001600160401b03821115620002495762000249620001c9565b601f19601f83011660200192915050565b60005b83811015620002775781810151838201526020016200025d565b8381111562000287576000848401525b50505050565b6000620002a46200029e846200022d565b6200020e565b905082815260208101848484011115620002c157620002c1600080fd5b620002ce8482856200025a565b509392505050565b600082601f830112620002ec57620002ec600080fd5b8151620002fe8482602086016200028d565b949350505050565b600080604083850312156200031e576200031e600080fd5b60006200032c8585620001bc565b92505060208301516001600160401b038111156200034d576200034d600080fd5b6200035b85828601620002d6565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200039057607f821691505b60208210811415620003a657620003a662000365565b50919050565b61357080620003bc6000396000f3fe6080604052600436106101d85760003560e01c806386ae747011610102578063c87b56dd11610095578063de9d132f11610064578063de9d132f1461054f578063e757223014610564578063e985e9c514610594578063f475409f146105b457600080fd5b8063c87b56dd146104da578063d5f39488146104fa578063d870b7971461051a578063de8b538d1461054757600080fd5b806395d89b41116100d157806395d89b4114610463578063a22cb46514610478578063b88d4fde14610498578063c29b2f20146104b857600080fd5b806386ae7470146103f0578063893d20e8146104055780638ad91345146104235780638da5cb5b1461044357600080fd5b80633a2a925c1161017a5780636352211e116101495780636352211e1461035f5780636ebdac121461037f57806370a082311461039f5780637acc0b20146103bf57600080fd5b80633a2a925c146102d957806342842e0e146102f9578063459b01c9146103195780634b673d111461033b57600080fd5b8063095ea7b3116101b6578063095ea7b31461026257806323b872dd146102845780632bf32ec3146102a457806330523e7e146102c457600080fd5b806301ffc9a7146101dd57806306fdde0314610213578063081812fc14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f83660046125ed565b6105c9565b60405161020a9190612618565b60405180910390f35b34801561021f57600080fd5b5061022861061b565b60405161020a9190612684565b34801561024157600080fd5b506102556102503660046126a6565b6106ad565b60405161020a91906126e1565b34801561026e57600080fd5b5061028261027d366004612703565b6106d4565b005b34801561029057600080fd5b5061028261029f366004612740565b610763565b3480156102b057600080fd5b506102826102bf3660046126a6565b610794565b3480156102d057600080fd5b50610228610826565b3480156102e557600080fd5b506102826102f436600461288b565b610835565b34801561030557600080fd5b50610282610314366004612740565b610919565b34801561032557600080fd5b5061032e610934565b60405161020a9190612987565b34801561034757600080fd5b50600c546103529081565b60405161020a9190612998565b34801561036b57600080fd5b5061025561037a3660046126a6565b61098e565b34801561038b57600080fd5b5061028261039a3660046126a6565b6109c3565b3480156103ab57600080fd5b506103526103ba3660046129a6565b610a2e565b3480156103cb57600080fd5b506103df6103da3660046126a6565b610a72565b60405161020a9594939291906129c7565b3480156103fc57600080fd5b50610228610bb0565b34801561041157600080fd5b506008546001600160a01b0316610255565b34801561042f57600080fd5b5061022861043e3660046126a6565b610c3e565b34801561044f57600080fd5b50600854610255906001600160a01b031681565b34801561046f57600080fd5b50610228610c49565b34801561048457600080fd5b50610282610493366004612a32565b610c58565b3480156104a457600080fd5b506102826104b3366004612a65565b610c63565b3480156104c457600080fd5b506104cd610c9b565b60405161020a9190612bb7565b3480156104e657600080fd5b506102286104f53660046126a6565b610ecd565b34801561050657600080fd5b50600954610255906001600160a01b031681565b34801561052657600080fd5b5061053a6105353660046126a6565b610fde565b60405161020a9190612bc8565b610282611171565b34801561055b57600080fd5b50610282611324565b34801561057057600080fd5b5061035261057f3660046126a6565b6000908152600b602052604090206001015490565b3480156105a057600080fd5b506101fd6105af366004612bd9565b611aec565b3480156105c057600080fd5b50610352611b1a565b60006001600160e01b031982166380ac58cd60e01b14806105fa57506001600160e01b03198216635b5e139f60e01b145b8061061557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461062a90612c22565b80601f016020809104026020016040519081016040528092919081815260200182805461065690612c22565b80156106a35780601f10610678576101008083540402835291602001916106a3565b820191906000526020600020905b81548152906001019060200180831161068657829003601f168201915b5050505050905090565b60006106b882611b7f565b506000908152600460205260409020546001600160a01b031690565b60006106df8261098e565b9050806001600160a01b0316836001600160a01b0316141561071c5760405162461bcd60e51b815260040161071390612c8a565b60405180910390fd5b336001600160a01b038216148061073857506107388133611aec565b6107545760405162461bcd60e51b815260040161071390612cf4565b61075e8383611bb6565b505050565b61076d3382611c24565b6107895760405162461bcd60e51b815260040161071390612d4f565b61075e838383611c82565b600d805460018181019092557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5018290556000828152600b602052604090819020918201546003830154600484015492517ff2984bdc0ce5f88de2f42cd8fc34fe3eddf8d42434e2ba1f537df310f4e2274b9461081b949093926002850192909190612dd5565b60405180910390a150565b60606007805461062a90612c22565b600a805490600061084583612e1d565b90915550506040805160a081018252858152602080820186905281830185905260608201849052600a54608083018190526000908152600b82529290922081518051929391926108989284920190612518565b506020828101516001830155604083015180516108bb9260028501920190612518565b5060608201516003820155608090910151600490910155600a546040517fe3b25aa175d4abb6345ae28b959875b745e963873f0d50229dfa7100efd3b0479161090b9187918791879187916129c7565b60405180910390a150505050565b61075e83838360405180602001604052806000815250610c63565b6060600c6001018054806020026020016040519081016040528092919081815260200182805480156106a357602002820191906000526020600020905b815481526020019060010190808311610971575050505050905090565b6000818152600260205260408120546001600160a01b0316806106155760405162461bcd60e51b815260040161071390612e6f565b60005b600d54811015610a2a5781600c60010182815481106109e7576109e7612e7f565b90600052602060002001541415610a1857600d805482908110610a0c57610a0c612e7f565b60009182526020822001555b80610a2281612e1d565b9150506109c6565b5050565b60006001600160a01b038216610a565760405162461bcd60e51b815260040161071390612edb565b506001600160a01b031660009081526003602052604090205490565b600b60205260009081526040902080548190610a8d90612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab990612c22565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b505050505090806001015490806002018054610b2190612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4d90612c22565b8015610b9a5780601f10610b6f57610100808354040283529160200191610b9a565b820191906000526020600020905b815481529060010190602001808311610b7d57829003601f168201915b5050505050908060030154908060040154905085565b60078054610bbd90612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610be990612c22565b8015610c365780601f10610c0b57610100808354040283529160200191610c36565b820191906000526020600020905b815481529060010190602001808311610c1957829003601f168201915b505050505081565b606061061582610ecd565b60606001805461062a90612c22565b610a2a338383611da4565b610c6d3383611c24565b610c895760405162461bcd60e51b815260040161071390612d4f565b610c9584848484611e47565b50505050565b60606000600a5467ffffffffffffffff811115610cba57610cba612790565b604051908082528060200260200182016040528015610d1d57816020015b610d0a6040518060a0016040528060608152602001600081526020016060815260200160008152602001600081525090565b815260200190600190039081610cd85790505b50905060005b600a54811015610ec757600b6000610d3c836001612eeb565b81526020019081526020016000206040518060a0016040529081600082018054610d6590612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9190612c22565b8015610dde5780601f10610db357610100808354040283529160200191610dde565b820191906000526020600020905b815481529060010190602001808311610dc157829003601f168201915b5050505050815260200160018201548152602001600282018054610e0190612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2d90612c22565b8015610e7a5780601f10610e4f57610100808354040283529160200191610e7a565b820191906000526020600020905b815481529060010190602001808311610e5d57829003601f168201915b5050505050815260200160038201548152602001600482015481525050828281518110610ea957610ea9612e7f565b60200260200101819052508080610ebf90612e1d565b915050610d23565b50919050565b6060610ed882611b7f565b60008281526006602052604081208054610ef190612c22565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1d90612c22565b8015610f6a5780601f10610f3f57610100808354040283529160200191610f6a565b820191906000526020600020905b815481529060010190602001808311610f4d57829003601f168201915b505050505090506000610f8860408051602081019091526000815290565b9050805160001415610f9b575092915050565b815115610fcd578082604051602001610fb5929190612f25565b60405160208183030381529060405292505050919050565b610fd684611e7a565b949350505050565b6110106040518060a0016040528060608152602001600081526020016060815260200160008152602001600081525090565b6000828152600b602052604090819020815160a0810190925280548290829061103890612c22565b80601f016020809104026020016040519081016040528092919081815260200182805461106490612c22565b80156110b15780601f10611086576101008083540402835291602001916110b1565b820191906000526020600020905b81548152906001019060200180831161109457829003601f168201915b50505050508152602001600182015481526020016002820180546110d490612c22565b80601f016020809104026020016040519081016040528092919081815260200182805461110090612c22565b801561114d5780601f106111225761010080835404028352916020019161114d565b820191906000526020600020905b81548152906001019060200180831161113057829003601f168201915b50505050508152602001600382015481526020016004820154815250509050919050565b6008546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156111aa573d6000803e3d6000fd5b5060005b600d54811015611315577ffaabebfc042be040ffe38cdbde83eb863656dec8e75ee5bcf5dc88b7fe741588600b6000600c60010184815481106111f3576111f3612e7f565b90600052602060002001548152602001908152602001600020600001600b6000600c600101858154811061122957611229612e7f565b9060005260206000200154815260200190815260200160002060010154600b6000600c600101868154811061126057611260612e7f565b90600052602060002001548152602001908152602001600020600201600b6000600c600101878154811061129657611296612e7f565b9060005260206000200154815260200190815260200160002060030154600b6000600c60010188815481106112cd576112cd612e7f565b90600052602060002001548152602001908152602001600020600401546040516112fb959493929190612dd5565b60405180910390a18061130d81612e1d565b9150506111ae565b50611322600d600061259c565b565b600061132f600e5490565b905060006114b6611373604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b6113b0604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161034360f41b815250611eee565b6113f560405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161191960f11b815250611eee565b61143860405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b60405160200161144b9493929190612f3d565b60408051601f1981840301815282820190915260138252725265636569707420666f72206f72646572202360681b60208301529061148890611f1a565b61149185611f43565b6040516020016114a2929190612f25565b60405160208183030381529060405261206c565b6116046114fc60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b611539604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b611576604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161035360f41b815250611eee565b6115a6604051806040016040528060058152602001640eed2c8e8d60db1b8152506115a160be611f43565b611eee565b6115d2604051806040016040528060068152602001651a195a59da1d60d21b8152506115a16003611f43565b6040516020016115e6959493929190612f6d565b60408051601f19818403018152602083019091526000825290612095565b61171c61164a60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b611687604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b6116c5604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016203236360ec1b815250611eee565b6116f0604051806040016040528060058152602001640eed2c8e8d60db1b8152506115a160be611f43565b6115d2604051806040016040528060068152602001651a195a59da1d60d21b8152506115a16002611f43565b61186061175c604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b61179a604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016203238360ec1b815250611eee565b6117df60405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161189b60f11b815250611eee565b61182260405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b6040516020016118359493929190612f3d565b60408051601f198184030181528282019091526005825264151bdd185b60da1b60208301529061206c565b6119bc6118a0604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250611eee565b6118de604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016203330360ec1b815250611eee565b61192360405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161189b60f11b815250611eee565b61196660405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164626c61636b60d81b815250611eee565b6040516020016119799493929190612f3d565b60408051601f19818403018152828201909152601882527f302e30303030303030303030303030303030303120555344000000000000000060208301529061206c565b6040516020016119d0959493929190612fb4565b60408051601f19818403018152908290526119ed916020016130dd565b60408051601f1981840301815282820190915260158252740a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d60581b60208301529150611a2d906120be565b611a36816120be565b611a6c6040518060400160405280601581526020017416969696969696969696969696969696969696968560591b8152506120be565b611a763383612101565b611a80828261211b565b611aa360405180606001604052806025815260200161351660259139833361216e565b611ab1600e80546001019055565b7fcfa92d0787bcd341bae7bf65f23e1711138fdb2fa7f4cbc3c4030475caf227a682604051611ae09190612998565b60405180910390a15050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600080805b600d54811015610ec757600b6000600c6001018381548110611b4357611b43612e7f565b906000526020600020015481526020019081526020016000206001015482611b6b9190612eeb565b915080611b7781612e1d565b915050611b1f565b6000818152600260205260409020546001600160a01b0316611bb35760405162461bcd60e51b815260040161071390612e6f565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611beb8261098e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c308361098e565b9050806001600160a01b0316846001600160a01b03161480611c575750611c578185611aec565b80610fd65750836001600160a01b0316611c70846106ad565b6001600160a01b031614949350505050565b826001600160a01b0316611c958261098e565b6001600160a01b031614611cbb5760405162461bcd60e51b81526004016107139061312b565b6001600160a01b038216611ce15760405162461bcd60e51b81526004016107139061317c565b611cec600082611bb6565b6001600160a01b0383166000908152600360205260408120805460019290611d1590849061318c565b90915550506001600160a01b0382166000908152600360205260408120805460019290611d43908490612eeb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b03161415611dd65760405162461bcd60e51b8152600401610713906131d7565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611e3a908590612618565b60405180910390a3505050565b611e52848484611c82565b611e5e848484846121b5565b610c955760405162461bcd60e51b815260040161071390613236565b6060611e8582611b7f565b6000611e9c60408051602081019091526000815290565b90506000815111611ebc5760405180602001604052806000815250611ee7565b80611ec6846122b3565b604051602001611ed7929190612f25565b6040516020818303038152906040525b9392505050565b60608282604051602001611f03929190613246565b604051602081830303815290604052905092915050565b606081604051602001611f2d9190613285565b6040516020818303038152906040529050919050565b606081611f675750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611f915780611f7b81612e1d565b9150611f8a9050600a836132cc565b9150611f6b565b60008167ffffffffffffffff811115611fac57611fac612790565b6040519080825280601f01601f191660200182016040528015611fd6576020820181803683370190505b509050815b851561206357611fec60018261318c565b90506000611ffb600a886132cc565b61200690600a6132e0565b612010908861318c565b61201b9060306132ff565b905060008160f81b90508084848151811061203857612038612e7f565b60200101906001600160f81b031916908160001a90535061205a600a896132cc565b97505050611fdb565b50949350505050565b6060611ee7604051806040016040528060048152602001631d195e1d60e21b81525084846123b1565b6060611ee7604051806040016040528060048152602001631c9958dd60e21b81525084846123b1565b611bb3816040516024016120d29190612684565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526123e2565b610a2a828260405180602001604052806000815250612403565b6000828152600260205260409020546001600160a01b031661214f5760405162461bcd60e51b81526004016107139061336b565b6000828152600660209081526040909120825161075e92840190612518565b61075e8383836040516024016121869392919061337b565b60408051601f198184030181529190526020810180516001600160e01b031663038fd88960e31b1790526123e2565b60006001600160a01b0384163b156122a857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121f99033908990889088906004016133a8565b6020604051808303816000875af1925050508015612234575060408051601f3d908101601f19168201909252612231918101906133ed565b60015b61228e573d808015612262576040519150601f19603f3d011682016040523d82523d6000602084013e612267565b606091505b5080516122865760405162461bcd60e51b815260040161071390613236565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610fd6565b506001949350505050565b6060816122d75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561230157806122eb81612e1d565b91506122fa9050600a836132cc565b91506122db565b60008167ffffffffffffffff81111561231c5761231c612790565b6040519080825280601f01601f191660200182016040528015612346576020820181803683370190505b5090505b8415610fd65761235b60018361318c565b9150612368600a8661340e565b612373906030612eeb565b60f81b81838151811061238857612388612e7f565b60200101906001600160f81b031916908160001a9053506123aa600a866132cc565b945061234a565b6060838383866040516020016123ca9493929190613422565b60405160208183030381529060405290509392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b61240d8383612436565b61241a60008484846121b5565b61075e5760405162461bcd60e51b815260040161071390613236565b6001600160a01b03821661245c5760405162461bcd60e51b8152600401610713906134c1565b6000818152600260205260409020546001600160a01b0316156124915760405162461bcd60e51b815260040161071390613505565b6001600160a01b03821660009081526003602052604081208054600192906124ba908490612eeb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461252490612c22565b90600052602060002090601f016020900481019282612546576000855561258c565b82601f1061255f57805160ff191683800117855561258c565b8280016001018555821561258c579182015b8281111561258c578251825591602001919060010190612571565b506125989291506125b6565b5090565b5080546000825590600052602060002090810190611bb391905b5b8082111561259857600081556001016125b7565b6001600160e01b031981165b8114611bb357600080fd5b8035610615816125cb565b60006020828403121561260257612602600080fd5b6000610fd684846125e2565b8015155b82525050565b60208101610615828461260e565b60005b83811015612641578181015183820152602001612629565b83811115610c955750506000910152565b600061265c825190565b808452602084019350612673818560208601612626565b601f01601f19169290920192915050565b60208082528101611ee78184612652565b806125d7565b803561061581612695565b6000602082840312156126bb576126bb600080fd5b6000610fd6848461269b565b60006001600160a01b038216610615565b612612816126c7565b6020810161061582846126d8565b6125d7816126c7565b8035610615816126ef565b6000806040838503121561271957612719600080fd5b600061272585856126f8565b92505060206127368582860161269b565b9150509250929050565b60008060006060848603121561275857612758600080fd5b600061276486866126f8565b9350506020612775868287016126f8565b92505060406127868682870161269b565b9150509250925092565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127cc576127cc612790565b6040525050565b60006127de60405190565b90506127ea82826127a6565b919050565b600067ffffffffffffffff82111561280957612809612790565b601f19601f83011660200192915050565b82818337506000910152565b6000612839612834846127ef565b6127d3565b90508281526020810184848401111561285457612854600080fd5b61285f84828561281a565b509392505050565b600082601f83011261287b5761287b600080fd5b8135610fd6848260208601612826565b600080600080608085870312156128a4576128a4600080fd5b843567ffffffffffffffff8111156128be576128be600080fd5b6128ca87828801612867565b94505060206128db8782880161269b565b935050604085013567ffffffffffffffff8111156128fb576128fb600080fd5b61290787828801612867565b92505060606129188782880161269b565b91505092959194509250565b80612612565b60006129368383612924565b505060200190565b6000612948825190565b80845260209384019383018060005b8381101561297c57815161296b888261292a565b975060208301925050600101612957565b509495945050505050565b60208082528101611ee7818461293e565b602081016106158284612924565b6000602082840312156129bb576129bb600080fd5b6000610fd684846126f8565b60a080825281016129d88188612652565b90506129e76020830187612924565b81810360408301526129f98186612652565b9050612a086060830185612924565b612a156080830184612924565b9695505050505050565b8015156125d7565b803561061581612a1f565b60008060408385031215612a4857612a48600080fd5b6000612a5485856126f8565b925050602061273685828601612a27565b60008060008060808587031215612a7e57612a7e600080fd5b6000612a8a87876126f8565b9450506020612a9b878288016126f8565b9350506040612aac8782880161269b565b925050606085013567ffffffffffffffff811115612acc57612acc600080fd5b61291887828801612867565b805160a080845260009190840190612af08282612652565b9150506020830151612b056020860182612924565b5060408301518482036040860152612b1d8282612652565b9150506060830151612b326060860182612924565b50608083015161285f6080860182612924565b6000611ee78383612ad8565b6000612b5b825190565b80845260208401935083602082028501612b758560200190565b8060005b85811015612baa5784840389528151612b928582612b45565b94506020830160209a909a0199925050600101612b79565b5091979650505050505050565b60208082528101611ee78184612b51565b60208082528101611ee78184612ad8565b60008060408385031215612bef57612bef600080fd5b6000612bfb85856126f8565b9250506020612736858286016126f8565b634e487b7160e01b600052602260045260246000fd5b600281046001821680612c3657607f821691505b60208210811415610ec757610ec7612c0c565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602082015291505b5060400190565b6020808252810161061581612c49565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150612c83565b6020808252810161061581612c9a565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150612c83565b6020808252810161061581612d04565b60008154612d6c81612c22565b808552602085019450600182168015612d8c5760018114612d9e57612dcc565b60ff1983168652602086019350612dcc565b60008581526020902060005b83811015612dc657815488820152600190910190602001612daa565b87019450505b50505092915050565b60a08082528101612de68188612d5f565b9050612df56020830187612924565b81810360408301526129f98186612d5f565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612e3157612e31612e07565b5060010190565b601881526000602082017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815291505b5060200190565b6020808252810161061581612e38565b634e487b7160e01b600052603260045260246000fd5b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150612c83565b6020808252810161061581612e95565b60008219821115612efe57612efe612e07565b500190565b6000612f0d825190565b612f1b818560208601612626565b9290920192915050565b6000612f318285612f03565b9150610fd68284612f03565b6000612f498287612f03565b9150612f558286612f03565b9150612f618285612f03565b9150612a158284612f03565b6000612f798288612f03565b9150612f858287612f03565b9150612f918286612f03565b9150612f9d8285612f03565b9150612fa98284612f03565b979650505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222077696474683d2233303022206865696768743d223430302260208201527f207374796c653d226261636b67726f756e643a236666666666663b20626f726460408201527f65722d7261646975733a313070783b20626f726465722d7374796c653a20736f60608201527f6c69643b20626f726465722d77696474683a3270783b20626f726465722d636f60808201526b3637b91d313630b1b590111f60a11b60a082015260ac0160006130938288612f03565b915061309f8287612f03565b91506130ab8286612f03565b91506130b78285612f03565b91506130c38284612f03565b651e17b9bb339f60d11b8152600601979650505050505050565b6000611ee78284612f03565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150612c83565b60208082528101610615816130e9565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150612c83565b602080825281016106158161313b565b60008282101561319e5761319e612e07565b500390565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150612e68565b60208082528101610615816131a3565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150612c83565b60208082528101610615816131e7565b60006132528285612f03565b603d60f81b8152601160f91b600182015260020191506132728284612f03565b61011160f51b8152600201949350505050565b683c215b43444154415b60b81b815260090160006132a38284612f03565b622eae9f60e91b81526003019392505050565b634e487b7160e01b600052601260045260246000fd5b6000826132db576132db6132b6565b500490565b60008160001904831182151516156132fa576132fa612e07565b500290565b600060ff8216915060ff831692508260ff03821115612efe57612efe612e07565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b60208201529150612c83565b6020808252810161061581613320565b6060808252810161338c8186612652565b905061339b6020830185612924565b610fd660408301846126d8565b608081016133b682876126d8565b6133c360208301866126d8565b6133d06040830185612924565b8181036060830152612a158184612652565b8051610615816125cb565b60006020828403121561340257613402600080fd5b6000610fd684846133e2565b60008261341d5761341d6132b6565b500690565b600f60fa1b815260010160006134388287612f03565b600160fd1b8152600101915061344e8286612f03565b601f60f91b815260010191506134648285612f03565b613c2f60f01b8152600201915061347b8284612f03565b601f60f91b81526001019695505050505050565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000612e68565b602080825281016106158161348f565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150612e68565b60208082528101610615816134d156fe416e204e465420772f20494420257320686173206265656e206d696e74656420746f202573a2646970667358221220ccbf8f1db6d4a2299ca4775e01596cec47d515b344fa056a6f6b95223b34a31d64736f6c634300080c0033a264697066735822122006f22b2819f924a5cd239bdccd0fb62a667d7864f7b8a1ccccf91fe6f594a96f64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3115,
        "contract": "contracts/VendorFactory.sol:VendorFactory",
        "label": "vendor",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Vendor)3110"
      },
      {
        "astId": 3119,
        "contract": "contracts/VendorFactory.sol:VendorFactory",
        "label": "list_of_vendors",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(Vendor)3110)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(Vendor)3110)dyn_storage": {
        "base": "t_contract(Vendor)3110",
        "encoding": "dynamic_array",
        "label": "contract Vendor[]",
        "numberOfBytes": "32"
      },
      "t_contract(Vendor)3110": {
        "encoding": "inplace",
        "label": "contract Vendor",
        "numberOfBytes": "20"
      }
    }
  }
}